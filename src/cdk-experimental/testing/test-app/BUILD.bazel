package(default_visibility=["//visibility:public"])

load("@npm_bazel_typescript//:defs.bzl", "ts_devserver")
load("//tools:defaults.bzl", "ng_module", "ng_test_library", "ts_library")
load("//:packages.bzl", "ANGULAR_LIBRARY_UMDS")

ng_module(
  name = "test-app",
  srcs = glob(["**/*.ts"], exclude=["**/*.spec.ts", "harnesses/**"]),
  assets = glob(["**/*.html", "**/*.css"], exclude = ["index.html"]),
  deps = [
    "@npm//@angular/core",
    "@npm//@angular/forms",
  ],
)

ts_devserver(
    name = "devserver",
    port = 4200,
    # Name of the AMD module that should be required on page load.
    entry_module = "angular_material/src/cdk-experimental/testing/test-app/main",
    # Serving path of the bundle that serves all files specified in "deps" and "scripts".
    serving_path = "/bundle.js",
    # Root paths can be used simplify the loading of files from external Bazel repositories
    # (such as the Bazel managed deps repository called "npm")
    additional_root_paths = [
      "npm/node_modules",
    ],
    # Files which should be provided by Bazel when running the devserver. These are not
    # automatically served, but can be loaded manually through HTTP requests.
    static_files = [
      "@npm//zone.js",
      "@npm//core-js",
      ":index.html",
    ],
    # Scripts which will be included in the serving_path bundle after "require.js" has been
    # loaded.
    # TODO(jelbourn): remove UMDs from here once we don't have to manually include them
    scripts = [
      ":devserver-configure.js",
      "//tools/rxjs:rxjs_umd_modules",
      "@npm//node_modules/tslib:tslib.js",
    ] + ANGULAR_LIBRARY_UMDS,
    # Dependencies that produce JavaScript output will be automatically included in the
    # serving_path bundle
    deps = [":test-app"],
)

ng_module(
  name = "test_app_test_harnesses",
  srcs = glob(["harnesses/*.ts"]),
  deps = [
    "//src/cdk-experimental/testing",
  ],
)

ng_test_library(
  name = "test_app_test_sources",
  srcs = glob(["**/*.spec.ts"], exclude=["**/*.e2e.spec.ts"]),
  deps = [
    ":test-app",
    ":test_app_test_harnesses",
  ],
)

ts_library(
   name = "test_app_e2e_test_sources",
   srcs = glob(["**/*.e2e.spec.ts"]),
   tsconfig = ":tsconfig.json",
   deps = [
     "@npm//@types/jasmine",
     "@npm//@types/selenium-webdriver",
     "@npm//protractor",
     ":test_app_test_harnesses",
     "//src/cdk-experimental/testing",
   ],
)
