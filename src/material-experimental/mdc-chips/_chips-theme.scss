@use '@material/chips/chip' as mdc-chip;
@use '@material/chips/chip-theme' as mdc-chip-theme;
@use '@material/chips/chip-set' as mdc-chip-set;
@use '@material/theme/theme-color' as mdc-theme-color;
@use '@material/theme/color-palette' as mdc-color-palette;
@use 'sass:color';
@use 'sass:map';
@use '../mdc-helpers/mdc-helpers';
@use '../../material/core/typography/typography';
@use '../../material/core/theming/theming';

@mixin _base-chip($is-dark) {
  $on-surface-state-content: if($is-dark, mdc-color-palette.$grey-50, mdc-color-palette.$grey-900);
  $surface:
    color.mix(mdc-theme-color.prop-value(on-surface), mdc-theme-color.prop-value(surface), 12%);

  // TODO(crisbeto): ideally the $label-text-color would be something along the lines of:
  // `if($is-dark, mdc-color-palette.$grey-100, mdc-color-palette.$grey-800)`, because it allows
  // the user to distinguish between when the primary action is focused versus the remove icon.
  // The problem is that the color contrast is worse and there are a lot of Google screenshot tests
  // that expect the darker color.
  $label-text-color: $on-surface-state-content;

  @include mdc-chip-theme.theme-styles((
    flat-focus-outline-color: $on-surface-state-content,
    flat-unselected-focus-outline-color: $on-surface-state-content,
    focus-label-text-color: $on-surface-state-content,
    focus-outline-color: $on-surface-state-content,
    hover-label-text-color: $on-surface-state-content,
    pressed-label-text-color: $on-surface-state-content,
    unselected-focus-label-text-color: $on-surface-state-content,
    unselected-hover-label-text-color: $on-surface-state-content,
    unselected-pressed-label-text-color: $on-surface-state-content,
    with-trailing-icon-trailing-icon-color: $on-surface-state-content,
    with-leading-icon-leading-icon-color: $on-surface-state-content,

    elevated-disabled-container-color: $surface,
    elevated-container-color: $surface,
    elevated-unselected-container-color: $surface,

    with-icon-unselected-icon-color: $label-text-color,
    unselected-label-text-color: $label-text-color,
    label-text-color: $label-text-color,
    disabled-label-text-color: $label-text-color,
  ));

  // We should be able to customize this using the `with-icon-selected-disabled-icon-color` key,
  // but the MDC validation blocks us, even though they have a lookup for it.
  @include mdc-chip-theme.checkmark-color((disabled: $label-text-color));
}

@mixin _colored-chip($palette) {
  $background: theming.get-color-from-palette($palette);
  $foreground: theming.get-color-from-palette($palette, default-contrast);

  &.mat-mdc-chip-selected {
    @include mdc-chip-theme.theme-styles((
      elevated-selected-container-color: $background,
      flat-selected-container-color: $background,

      selected-focus-label-text-color: $foreground,
      selected-hover-label-text-color: $foreground,
      selected-pressed-label-text-color: $foreground,
      with-icon-selected-focus-icon-color: $foreground,
      with-icon-selected-hover-icon-color: $foreground,
      with-icon-selected-pressed-icon-color: $foreground,
      with-trailing-icon-trailing-icon-color: $foreground,

      with-icon-focus-icon-color: $foreground,
      with-icon-hover-icon-color: $foreground,
      with-icon-pressed-icon-color: $foreground,

      selected-label-text-color: $foreground,
      with-icon-selected-icon-color: $foreground,

      // TODO: the previous styles preserved the color when disabled and selected. It seems like
      // this could be supported by passing in `selected-disabled-label-text-color`, but the
      // theme key validation rejects it.
    ));
  }


  &.mat-mdc-chip-highlighted {
    $icon-color: $foreground;
    $icon-map: (
      enabled: $icon-color,
      disabled: $icon-color,
      hover: $icon-color,
      focus: $icon-color
    );

    @include mdc-chip-theme.container-color($background);
    @include mdc-chip-theme.icon-color($icon-map);
    @include mdc-chip-theme.trailing-action-color($icon-map);
    @include mdc-chip-theme.text-label-color((
      enabled: $foreground,
      disabled: $foreground,
      hover: $foreground,
      focus: $foreground
    ));
  }
}

@mixin color($config-or-theme) {
  $config: theming.get-color-config($config-or-theme);
  $primary: map.get($config, primary);
  $accent: map.get($config, accent);
  $warn: map.get($config, warn);
  $foreground: map.get($config, foreground);
  $is-dark: map.get($config, is-dark);

  @include mdc-helpers.mat-using-mdc-theme($config) {
    .mat-mdc-standard-chip {
      @include _base-chip($is-dark);

      &.mat-primary {
        @include _colored-chip($primary);
      }

      &.mat-accent {
        @include _colored-chip($accent);
      }

      &.mat-warn {
        @include _colored-chip($warn);
      }
    }
  }

  .mat-mdc-chip-focus-overlay {
    background: map.get($foreground, base);
  }
}

@mixin typography($config-or-theme) {
  $config: typography.private-typography-to-2018-config(
      theming.get-typography-config($config-or-theme));
  @include mdc-chip-set.core-styles($query: mdc-helpers.$mat-typography-styles-query);
  @include mdc-helpers.mat-using-mdc-typography($config) {
    @include mdc-chip.without-ripple-styles($query: mdc-helpers.$mat-typography-styles-query);
  }
}

@mixin density($config-or-theme) {
  $density-scale: theming.get-density-config($config-or-theme);
  .mat-mdc-chip {
    @include mdc-chip-theme.density($density-scale, $query: mdc-helpers.$mat-base-styles-query);
  }
}

@mixin theme($theme-or-color-config) {
  $theme: theming.private-legacy-get-theme($theme-or-color-config);
  @include theming.private-check-duplicate-theme-styles($theme, 'mat-mdc-chips') {
    $color: theming.get-color-config($theme);
    $density: theming.get-density-config($theme);
    $typography: theming.get-typography-config($theme);

    @if $color != null {
      @include color($color);
    }
    @if $density != null {
      @include density($density);
    }
    @if $typography != null {
      @include typography($typography);
    }
  }
}

