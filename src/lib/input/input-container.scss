@import '../core/style/variables';
@import '../core/style/vendor-prefixes';
@import '../core/style/form-common';


// Min amount of space between start and end hint.
$mat-input-hint-min-space: 1em !default;
// The amount of additional line space beyond 1em on the input (1/2 below, 1/2 above).
$mat-input-line-spacing: 0.125 !default;
// The height of the underline.
$mat-input-underline-height: 1px !default;
// The amount to scale the font for the floating label and subscript.
$mat-input-subscript-font-scale: 0.75 !default;
// The amount to scale the font for the prefix and suffix icons.
$mat-input-prefix-suffix-icon-font-scale: 1.5 !default;

// The line-height for all text in the md-input-container
$mat-input-line-height: 1 + $mat-input-line-spacing;
// The padding on the infix. Mocks show half of the text size, but seem to measure from the edge of
// the text itself, not the edge of the line; therefore we subtract off 1/2 of the line spacing.
$mat-input-infix-padding: 0.5em - $mat-input-line-spacing / 2;
// The margin applied to the input-infix to reserve space for the floating label.
$mat-input-infix-margin-top: 1em * $mat-input-line-height * $mat-input-subscript-font-scale;
// Font size to use for the label and subscript text.
$mat-input-subscript-font-size: $mat-input-subscript-font-scale * 100%;
// Font size to use for the for the prefix and suffix icons.
$mat-input-prefix-suffix-icon-font-size: $mat-input-prefix-suffix-icon-font-scale * 100%;
// The space between the bottom of the input table and the subscript container. Mocks show half of
// the text size, but this margin is applied to an element with the subscript text font size, so we
// need to divide by the scale factor to make it half of the original text size. We again need to
// subtract off 1/2 of the line spacing since the mocks measure to the edge of the text, not the
// edge of the line.
$mat-input-subscript-margin-top:
    0.5em / $mat-input-subscript-font-scale - $mat-input-line-spacing / 2;
// The padding applied to the input-wrapper to reserve space for the subscript, since it's
// absolutely positioned. This is a combination of the subscript's margin and line-height, but we
// need to multiply by the subscript font scale factor since the wrapper has a larger font size.
$mat-input-wrapper-padding-bottom:
    ($mat-input-subscript-margin-top + $mat-input-line-height) * $mat-input-subscript-font-scale;


// Applies a floating placeholder above the input itself.
@mixin mat-input-placeholder-floating {
  display: block;

  transform: translateY(-$mat-input-infix-margin-top - $mat-input-infix-padding)
             scale($mat-input-subscript-font-scale)
             // We use perspecitve to fix the text blurriness as described here:
             // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/
             // This results in a small jitter after the label floats on Firefox, which the
             // translateZ fixes.
             perspective(1px) translateZ(0.001px);
  // The tricks above used to smooth out the animation on chrome and firefox actually make things
  // worse on IE, so we don't include them in the IE version.
  -ms-transform: translateY(-$mat-input-infix-margin-top - $mat-input-infix-padding)
                 scale($mat-input-subscript-font-scale);

  width: 100% / $mat-input-subscript-font-scale;
}


.mat-input-container {
  display: inline-block;
  position: relative;
  font-family: $mat-font-family;

  // TODO(mmalerba): should this come from typography settings? If so a lot of this CSS needs to go
  // into some sort of typography mixin.
  line-height: $mat-input-line-height;

  // To avoid problems with text-align.
  text-align: left;

  [dir='rtl'] & {
    text-align: right;
  }
}

// Global wrapper. We need to apply margin to the element for spacing, but
// cannot apply it to the host element directly.
.mat-input-wrapper {
  position: relative;
  padding-bottom: $mat-input-wrapper-padding-bottom;
}

// We use a flex layout to baseline align the prefix and suffix elements.
// The underline is outside of it so it can cover all of the elements under this flex container.
.mat-input-flex {
  display: inline-flex;
  align-items: baseline;
  width: 100%;
}

.mat-input-prefix,
.mat-input-suffix {
  white-space: nowrap;
  flex: none;

  // Allow icons in a prefix or suffix to adapt to the correct size.
  .mat-icon,
  .mat-datepicker-toggle {
    width: 1em;
    height: 1em;
    font-size: $mat-input-prefix-suffix-icon-font-size;
    vertical-align: text-bottom;
  }

  // Allow icon buttons in a prefix or suffix to adapt to the correct size.
  .mat-icon-button {
    font-size: inherit;
    line-height: $mat-input-line-height;
    height: $mat-input-prefix-suffix-icon-font-scale * 1em;
    width: $mat-input-prefix-suffix-icon-font-scale * 1em;
    vertical-align: baseline;

    .mat-icon {
      font-size: inherit;
      line-height: $mat-input-prefix-suffix-icon-font-scale;
      width: 1em;
      height: 1em;
      vertical-align: baseline;
    }
  }
}

.mat-input-infix {
  display: block;
  position: relative;
  padding: $mat-input-infix-padding 0;
  // Throws off the baseline if we do it as a real margin, so we do it as a border instead.
  border-top: $mat-input-infix-margin-top solid transparent;
  flex: auto;
}

// The Input element proper.
.mat-input-element {
  // Font needs to be inherited, because by default <input> has a system font.
  font: inherit;

  // The Material input should match whatever background it is above.
  background: transparent;

  // If background matches current background then so should the color for proper contrast
  color: currentColor;

  // By default, <input> has a padding, border, outline and a default width.
  border: none;
  outline: none;
  padding: 0;
  width: 100%;

  // Needed to make last line of the textarea line up with the baseline.
  vertical-align: bottom;

  .mat-end & {
    text-align: right;

    [dir='rtl'] & {
      text-align: left;
    }
  }

  // Undo the red box-shadow glow added by Firefox on invalid inputs.
  // See https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-ui-invalid
  &:-moz-ui-invalid {
    box-shadow: none;
  }

  // Pseudo-class for Chrome and Safari auto-fill to move the placeholder to
  // the floating position. This is necessary because these browsers do not actually
  // fire any events when a form auto-fill is occurring.
  // Once the autofill is committed, a change event happen and the regular md-input-container
  // classes take over to fulfill this behaviour.
  // Assumes the autofill is non-empty.
  &:-webkit-autofill + .mat-input-placeholder-wrapper .mat-float {
    @include mat-input-placeholder-floating;
    transition: none;
  }

  // Note that we can't use something like visibility: hidden or
  // display: none, because IE ends up preventing the user from
  // focusing the input altogether.
  @include input-placeholder {
    // Needs to be !important, because the placeholder will end up inheriting the
    // input color in IE, if the consumer overrides it with a higher specificity.
    color: transparent !important;
  }
}

// Used to hide the placeholder overflow on IE, since IE doesn't take transform into account when
// determining overflow.
.mat-input-placeholder-wrapper {
  position: absolute;
  left: 0;
  top: -$mat-input-infix-margin-top;
  box-sizing: content-box;
  width: 100%;
  height: 100%;
  padding-top: $mat-input-infix-margin-top;
  overflow: hidden;
  pointer-events: none;  // We shouldn't catch mouse events (let them through).
}

// The placeholder label. This is invisible unless it is. The logic to show it is
// basically `empty || (float && (!empty || focused))`. Float is dependent on the
// `floatingPlaceholder` input.
.mat-input-placeholder {
  // The placeholder is after the <input>, but needs to be aligned top-left of the
  // infix <div>.
  position: absolute;
  left: 0;
  top: $mat-input-infix-margin-top + $mat-input-infix-padding;

  pointer-events: none;  // We shouldn't catch mouse events (let them through).

  // Put ellipsis text overflow.
  width: 100%;
  display: block;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;

  // The perspective helps smooth out animations on Chrome and Firefox but isn't needed on IE.
  transform: perspective(1px);
  -ms-transform: none;

  transform-origin: 0 0;
  transition: transform $swift-ease-out-duration $swift-ease-out-timing-function,
              color $swift-ease-out-duration $swift-ease-out-timing-function,
              width $swift-ease-out-duration $swift-ease-out-timing-function;

  &.mat-empty {
    display: block;
    cursor: text;
  }

  // Show the placeholder above the input when it's not empty, or focused.
  &.mat-float:not(.mat-empty), .mat-focused &.mat-float {
    @include mat-input-placeholder-floating;
  }

  [dir='rtl'] & {
    transform-origin: 100% 0;
    left: auto;
    right: 0;
  }
}

// Disable the placeholder animation when the input is not empty (this prevents placeholder
// animating up when the value is set programmatically).
.mat-input-placeholder:not(.mat-empty) {
  transition: none;
}

// The underline is what's shown under the input, its prefix and its suffix.
// The ripple is the blue animation coming on top of it.
.mat-input-underline {
  position: absolute;
  height: $mat-input-underline-height;
  width: 100%;

  // We want the underline to start at the end of the content box, not the padding box,
  // so we move it up by the padding amount;
  bottom: $mat-input-wrapper-padding-bottom;

  &.mat-disabled {
    @include mat-control-disabled-underline();
    background-position: 0;
    background-color: transparent;
  }

  .mat-input-ripple {
    position: absolute;
    height: $mat-input-underline-height * 2;
    top: 0;
    width: 100%;
    transform-origin: 50%;
    transform: scaleX(0.5);
    visibility: hidden;
    transition: background-color $swift-ease-in-duration $swift-ease-in-timing-function;

    .mat-focused &,
    .mat-input-invalid & {
      visibility: visible;
      transform: scaleX(1);
      transition: transform 150ms linear,
      background-color $swift-ease-in-duration $swift-ease-in-timing-function;
    }
  }
}

// Wrapper for the hints and error messages. Provides positioning and text size.
// Note that we're using `top` in order to allow for stacked children to flow downwards.
.mat-input-subscript-wrapper {
  position: absolute;
  font-size: $mat-input-subscript-font-size;
  margin-top: $mat-input-subscript-margin-top;
  width: 100%;
  overflow: hidden; // prevents multi-line errors from overlapping the input

  // We want the subscript to start at the end of the content box, not the padding box,
  // so we move it up by the padding amount (adjusted for the smaller font size);
  top: calc(100% - #{$mat-input-wrapper-padding-bottom / $mat-input-subscript-font-scale});
}

// Scale down icons in the placeholder and hint to be the same size as the text.
.mat-input-subscript-wrapper,
.mat-input-placeholder-wrapper {
  .mat-icon,
  .mat-datepicker-toggle {
    width: 1em;
    height: 1em;
    font-size: inherit;
    vertical-align: baseline;
  }
}

// Clears the floats on the hints. This is necessary for the hint animation to work.
.mat-input-hint-wrapper {
  display: flex;
}

// Spacer used to make sure start and end hints have enough space between them.
.mat-input-hint-spacer {
  flex: 1 0 $mat-input-hint-min-space;
}

// Single error message displayed beneath the input.
.mat-input-error {
  display: block;
}
