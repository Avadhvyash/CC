@import 'default-theme';
@import '_variables';

// This refers to the thickness of the slider. On a horizontal slider this is the height, on a
// vertical slider this is the width.
$mat-slider-thickness: 48px !default;
$mat-slider-min-size: 128px !default;
$mat-slider-padding: 8px !default;

$mat-slider-track-height: 2px !default;
$mat-slider-thumb-size: 20px !default;

$mat-slider-thumb-default-scale: 0.7 !default;
$mat-slider-thumb-focus-scale: 1 !default;

// TODO(iveysaur): Find an implementation to hide the track under a disabled thumb.
$mat-slider-off-color: rgba(black, 0.26);
$mat-slider-focused-color: rgba(black, 0.38);
$mat-slider-disabled-color: rgba(black, 0.26);

$mat-slider-thumb-arrow-height: 16px !default;
$mat-slider-thumb-arrow-width: 28px !default;

$mat-slider-thumb-label-size: 28px !default;
// The thumb has to be moved down so that it appears right over the slider track when visible and
// on the slider track when not.
$mat-slider-thumb-label-top: ($mat-slider-thickness / 2) -
    ($mat-slider-thumb-default-scale * $mat-slider-thumb-size / 2) - $mat-slider-thumb-label-size -
    $mat-slider-thumb-arrow-height + 10px !default;

/**
 * Uses a container height and an item height to center an item vertically within the container.
 */
@function center-vertically($containerHeight, $itemHeight) {
  @return ($containerHeight / 2) - ($itemHeight / 2);
}

/**
 * Positions the thumb based on its width and height.
 */
@mixin slider-thumb-position($width: $mat-slider-thumb-size, $height: $mat-slider-thumb-size) {
  position: absolute;
  top: center-vertically($mat-slider-thickness, $height);
  // This makes it so that the center of the thumb aligns with where the click was.
  // This is not affected by the movement of the thumb.
  left: (-$width / 2);
  width: $width;
  height: $height;
  border-radius: max($width, $height);
}

mat-slider {
  height: $mat-slider-thickness;
  min-width: $mat-slider-min-size;
  position: relative;
  padding: 0;
  display: inline-block;
  outline: none;
  vertical-align: middle;
}

mat-slider *,
mat-slider *::after {
  box-sizing: border-box;
}

/**
 * Exists in order to pad the slider and keep everything positioned correctly.
 * Cannot be merged with the .mat-slider-container.
 */
.mat-slider-wrapper {
  width: 100%;
  height: 100%;
  padding-left: $mat-slider-padding;
  padding-right: $mat-slider-padding;
}

/**
 * Holds the isActive and isSliding classes as well as helps with positioning the children.
 * Cannot be merged with .mat-slider-wrapper.
 */
.mat-slider-container {
  position: relative;
}

.mat-slider-track-container {
  width: 100%;
  position: absolute;
  top: center-vertically($mat-slider-thickness, $mat-slider-track-height);
  height: $mat-slider-track-height;
}

.mat-slider-track {
  position: absolute;
  left: 0;
  right: 0;
  height: 100%;
  background-color: $mat-slider-off-color;
}

.mat-slider-track-fill {
  transition-duration: $swift-ease-out-duration;
  transition-timing-function: $swift-ease-out-timing-function;
  transition-property: width, height;
  background-color: mat-color($mat-accent);
}

.mat-slider-tick-container, .mat-slider-last-tick-container {
  position: absolute;
  left: 0;
  right: 0;
  height: 100%;
}

.mat-slider-thumb-container {
  position: absolute;
  left: 0;
  top: 50%;
  transform: translate3d(-50%, -50%, 0);
  transition-duration: $swift-ease-out-duration;
  transition-timing-function: $swift-ease-out-timing-function;
  transition-property: left, bottom;
}

.mat-slider-thumb-position {
  transition: transform $swift-ease-out-duration $swift-ease-out-timing-function;
}

.mat-slider-thumb {
  z-index: 1;

  @include slider-thumb-position($mat-slider-thumb-size, $mat-slider-thumb-size);
  transform: scale($mat-slider-thumb-default-scale);
  transition: transform $swift-ease-out-duration $swift-ease-out-timing-function;
}

.mat-slider-thumb::after {
  content: '';
  position: absolute;
  width: $mat-slider-thumb-size;
  height: $mat-slider-thumb-size;
  border-radius: max($mat-slider-thumb-size, $mat-slider-thumb-size);
  border-width: 3px;
  border-style: solid;
  transition: inherit;
  background-color: mat-color($mat-accent);
  border-color: mat-color($mat-accent);
}

.mat-slider-thumb-label {
  display: flex;
  align-items: center;
  justify-content: center;

  position: absolute;
  left: -($mat-slider-thumb-label-size / 2);
  top: $mat-slider-thumb-label-top;
  width: $mat-slider-thumb-label-size;
  height: $mat-slider-thumb-label-size;
  border-radius: 50%;

  transform: scale(0.4) translate3d(0, (-$mat-slider-thumb-label-top + 10) / 0.4, 0) rotate(45deg);
  transition: 300ms $swift-ease-in-out-timing-function;
  transition-property: transform, border-radius;

  background-color: mat-color($mat-accent);
}

.mat-slider-thumb-label-text {
  z-index: 1;
  font-size: 12px;
  font-weight: bold;
  opacity: 0;
  transform: rotate(-45deg);
  transition: opacity 300ms $swift-ease-in-out-timing-function;
  color: white;
}

.mat-slider-container:not(.mat-slider-thumb-label-showing) .mat-slider-thumb-label {
  display: none;
}

.mat-slider-active.mat-slider-thumb-label-showing .mat-slider-thumb {
  transform: scale(0);
}

.mat-slider-sliding .mat-slider-thumb-position,
.mat-slider-sliding .mat-slider-track-fill {
  transition: none;
  cursor: default;
}

.mat-slider-active .mat-slider-thumb {
  transform: scale($mat-slider-thumb-focus-scale);
}

.mat-slider-active .mat-slider-thumb-label {
  border-radius: 50% 50% 0;
  transform: rotate(45deg);
}

.mat-slider-active .mat-slider-thumb-label-text {
  opacity: 1;
}
