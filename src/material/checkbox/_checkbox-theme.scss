@use 'sass:map';
@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;
@use '@material/form-field' as mdc-form-field;
@use '../core/theming/theming';
@use '../core/typography/typography';
@use '../core/mdc-helpers/mdc-helpers';
@use '../core/tokens/token-utils';
@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;

@mixin _emit-tokens($tokens) {
  @include mdc-checkbox-theme.theme(map.get($tokens, tokens-mdc-checkbox.$prefix) or ());
}

@mixin color($config-or-theme, $tokens: null) {
  $config: theming.get-color-config($config-or-theme);
  $primary: map.get($config, primary);
  $warn: map.get($config, warn);
  $foreground: map.get($config, foreground);
  $tokens: $tokens or (
    tokens-mdc-checkbox.$prefix: tokens-mdc-checkbox.get-color-tokens($config),
  );

  .mat-mdc-checkbox {
    @include _emit-tokens($tokens);

    &.mat-primary {
      $primary-config: map.merge($config, (accent: $primary));
      $primary-tokens: (
        tokens-mdc-checkbox.$prefix: tokens-mdc-checkbox.get-color-tokens($primary-config),
      );
      @include _emit-tokens($primary-tokens);
    }

    &.mat-warn {
      $warn-config: map.merge($config, (accent: $warn));
      $warn-tokens: (
        tokens-mdc-checkbox.$prefix: tokens-mdc-checkbox.get-color-tokens($warn-config),
      );
      @include _emit-tokens($warn-tokens);
    }

    @include mdc-helpers.using-mdc-theme($config) {
      // TODO(mmalerba): Switch to static-styles, theme-styles, and theme once they're available.
      @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-theme-styles-query);
    }

    &.mat-mdc-checkbox-disabled label {
      // MDC should set the disabled color on the label, but doesn't, so we do it here instead.
      color: theming.get-color-from-palette($foreground, disabled-text);
    }
  }
}

@mixin typography($config-or-theme, $tokens: null) {
  $config: typography.private-typography-to-2018-config(
          theming.get-typography-config($config-or-theme));
  $tokens: (
    tokens-mdc-checkbox.$prefix: tokens-mdc-checkbox.get-typography-tokens($config),
  );

  .mat-mdc-checkbox {
    @include _emit-tokens($tokens);

    @include mdc-helpers.using-mdc-typography($config) {
      // TODO(mmalerba): Switch to static-styles, theme-styles, and theme once they're available.
      @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-typography-styles-query);
    }
  }
}

@mixin density($config-or-theme, $tokens: null) {
  $density-scale: theming.get-density-config($config-or-theme);
  $tokens: $tokens or (
    tokens-mdc-checkbox.$prefix: tokens-mdc-checkbox.get-density-tokens($density-scale),
  );

  .mat-mdc-checkbox {
    @include _emit-tokens($tokens);
  }

  @include mdc-helpers.if-touch-targets-unsupported($density-scale) {
    .mat-mdc-checkbox-touch-target {
      display: none;
    }
  }
}

@mixin theme($theme-or-color-config) {
  $theme: theming.private-legacy-get-theme($theme-or-color-config);
  $tokens: map.get($theme, tokens);

  @include _emit-tokens($tokens or ());

  @include token-utils.back-compat-root-context($tokens or ()) {
    @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {
      $color: theming.get-color-config($theme);
      $density: theming.get-density-config($theme);
      $typography: theming.get-typography-config($theme);

      @if $color != null {
        @include color($color, $tokens and ());
      }
      @if $density != null {
        @include density($density, $tokens and ());
      }
      @if $typography != null {
        @include typography($typography, $tokens and ());
      }
    }
  }
}
