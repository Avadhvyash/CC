@use 'sass:map';
@use '../../../theming/theming';
@use '../../../typography/typography-utils';
@use '../../token-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mdc, text-button);

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
//
// Tokens that are available in MDC, but not used in Angular Material should be mapped to `null`.
// `null` indicates that we are intentionally choosing not to emit a slot or value for the token in
// our CSS.
@function get-unthemable-tokens() {
  @return (
    // The border radius of text buttons.
    container-shape: 4px,
    // The text transform used for text buttons.
    label-text-transform: none,
    // The size of icons used inside text buttons.
    with-icon-icon-size: 1.125rem,
    // =============================================================================================
    // = TOKENS NOT USED IN ANGULAR MATERIAL                                                       =
    // =============================================================================================
    // This is an odd token that does not result in a runtime configurable CSS variable. Instead it
    // toggles emission of some styles in the sass mixin. We don't use this in Angular.
    keep-touch-target: null,
  );
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($config) {
  $foreground: map.get($config, foreground);
  $foreground-base-color: theming.get-color-from-palette($foreground, base);
  $is-dark: map.get($config, is-dark);

  @return (
    // The text color for text buttons in the disabled state.
    disabled-label-text-color: theming.get-color-from-palette($foreground, disabled-text),
    // The text color for text buttons in the focused state.
    focus-label-text-color: $foreground-base-color,
    // The state overlay color for text buttons in the focused state.
    focus-state-layer-color: $foreground-base-color,
    // The opacity of the state overlay for text buttons in the focused state.
    focus-state-layer-opacity: if($is-dark, 0.24, 0.12),
    // The text color for text buttons in the hovered state.
    hover-label-text-color: $foreground-base-color,
    // The state overlay color for text buttons in the hovered state.
    hover-state-layer-color: $foreground-base-color,
    // The opacity of the state overlay for text buttons in the hovered state.
    hover-state-layer-opacity: if($is-dark, 0.08, 0.04),
    // The text color for text buttons.
    label-text-color: $foreground-base-color,
    // The text color for text buttons in the pressed state.
    pressed-label-text-color: $foreground-base-color,
    // The state overlay color for text buttons in the pressed state.
    pressed-state-layer-color: $foreground-base-color,
    // The opacity of the state overlay for text buttons in the pressed state.
    pressed-state-layer-opacity: if($is-dark, 0.24, 0.12),
    // The color of icons used within text buttons.
    with-icon-icon-color: $foreground-base-color,
    // The color of icons used within text buttons in the hovered state.
    with-icon-hover-icon-color: $foreground-base-color,
    // The color of icons used within text buttons in the focused state.
    with-icon-focus-icon-color: $foreground-base-color,
    // The color of icons used within text buttons in the pressed state.
    with-icon-pressed-icon-color: $foreground-base-color,
    // The color of icons used within text buttons in the disabled state.
    with-icon-disabled-icon-color: $foreground-base-color,
  );
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($config) {
  @return (
    // The font family for text buttons.
    label-text-font: typography-utils.font-family($config, button)
          or typography-utils.font-family($config),
    // The font size for text buttons.
    label-text-size: typography-utils.font-size($config, button),
    // The letter spacing for text buttons.
    label-text-tracking: typography-utils.letter-spacing($config, button),
    // The font weight for text buttons.
    label-text-weight: typography-utils.font-weight($config, button),
  );
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($config) {
  $scale: theming.clamp-density($config, -3);

  @return (
    // The height of text buttons.
    container-height: map.get((
      0: 36px,
      -1: 32px,
      -2: 28px,
      -3: 24px,
    ), $scale),
  );
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return token-utils.merge-all(
      get-unthemable-tokens(),
      get-color-tokens(token-utils.$placeholder-color-config),
      get-typography-tokens(token-utils.$placeholder-typography-config),
      get-density-tokens(token-utils.$placeholder-density-config)
  );
}
