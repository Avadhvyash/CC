@use '../../cdk/overlay';
@use '../../cdk/a11y';
@use '../../cdk/text-field';

// Core styles that can be used to apply material design treatments to any element.
@use './ripple/ripple';
@use './focus-indicators/focus-indicators';
@use './typography/all-typography';

// Mixin that renders all of the core styles that are not theme-dependent.
@mixin core($typography-config: null) {
  @include all-typography.all-component-typographies($typography-config);
  @include ripple.ripple();
  @include a11y.a11y-visually-hidden();
  @include overlay.overlay();
  @include text-field.text-field-autosize();
  @include text-field.text-field-autofill();
  // @include _mdc-core();

  .mat-focus-indicator {
    position: relative;

    &::before {
      --mat-focus-indicator-border-width: var(--mat-focus-indicator-border-width-custom, 3px);
      --mat-focus-indicator-border-style: var(--mat-focus-indicator-border-style-custom, solid);
      --mat-focus-indicator-border-radius: var(--mat-focus-indicator-border-radius-custom, 4px);
      --mat-focus-indicator-border-color: var(
        --mat-focus-indicator-border-color-custom,
        transparent
      );

      @include layout-common.fill();
      box-sizing: border-box;
      pointer-events: none;
      border: var(--mat-focus-indicator-border-width) var(--mat-focus-indicator-border-style)
        var(--mat-focus-indicator-border-color);
      border-radius: var(--mat-focus-indicator-border-radius);
    }
  }

  // .mat-focus-indicator {
  //   @include strong-focus-indicators(
  //     (
  //       border-color: var(--mat-focus-indicator-border-color),
  //     )
  //   );
  // }
}

@mixin strong-focus-indicators($config: ()) {
  // Default focus indicator config.
  $default-config: (
    border-style: solid,
    border-width: 3px,
    border-radius: 4px,
    border-color: black,
  );

  // Merge default config with user config.
  $config: map.merge($default-config, $config);
  // $border-style: map.get($config, border-style);
  // $border-width: map.get($config, border-width);
  // $border-radius: map.get($config, border-radius);
  // $border-color: map.get($config, border-color);

  // --mat-focus-indicator-border-style-custom: #{$border-style};
  // --mat-focus-indicator-border-width-custom: #{$border-width};
  // --mat-focus-indicator-border-radius-custom: #{$border-radius};
  // --mat-focus-indicator-border-color-custom: #{$border-color};

  @if (&) {
    @include _strong-focus-indicators-helper($config);
  } @else {
    :root {
      @include _strong-focus-indicators-helper($config);
    }
  }

  // Base styles for focus indicators.
  .mat-focus-indicator::before {
    @include layout-common.fill();
    box-sizing: border-box;
    pointer-events: none;
    border: $border-width $border-style transparent;
    border-radius: $border-radius;
  }

  .mat-focus-indicator:focus::before {
    content: '';
  }
}

// Mixin that handles null values for CSS variables
@mixin _create-variable($name, $value) {
  @if ($value) {
    --#{$name}: #{$value};
  }
}

// Mixin to dedup CSS Variables for the strong-focus-indicators mixin
@mixin _strong-focus-indicators-helper($config) {
  $border-style: map.get($config, border-style);
  $border-width: map.get($config, border-width);
  $border-radius: map.get($config, border-radius);
  $border-color: map.get($config, border-color);

  @include _create-variable('mat-focus-indicator-border-style-custom', $border-style);
  @include _create-variable('mat-focus-indicator-border-width-custom', $border-width);
  @include _create-variable('mat-focus-indicator-border-radius-custom', $border-radius);
  @include _create-variable('mat-focus-indicator-border-color-custom', $border-color);
}

// // Mixin that renders all of the core MDC styles. Private mixin included with `mat-core`.
// @mixin _mdc-core() {
//   @include _mdc-strong-focus-indicators-positioning();
// }

// // Mixin that ensures focus indicator host elements are positioned so that the focus indicator
// // pseudo element within is positioned relative to the host. Private mixin included within
// // `_mat-mdc-core`.
// @mixin _mdc-strong-focus-indicators-positioning() {
//   .mat-mdc-focus-indicator {
//     position: relative;

//     &::before {
//       --mat-focus-indicator-border-width: var(--mat-focus-indicator-border-width-custom, 3px);
//       --mat-focus-indicator-border-style: var(--mat-focus-indicator-border-style-custom, solid);
//       --mat-focus-indicator-border-radius: var(--mat-focus-indicator-border-radius-custom, 4px);
//       --mat-focus-indicator-border-color: var(
//         --mat-focus-indicator-border-color-custom,
//         transparent
//       );

//       @include layout-common.fill();
//       box-sizing: border-box;
//       pointer-events: none;
//       border: var(--mat-focus-indicator-border-width) var(--mat-focus-indicator-border-style)
//         var(--mat-focus-indicator-border-color);
//       border-radius: var(--mat-focus-indicator-border-radius);
//     }
//   }
// }
