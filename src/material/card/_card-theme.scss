@use 'sass:map';
@use '../core/style/sass-utils';
@use '../core/theming/theming';
@use '../core/typography/typography';
@use '../core/tokens/token-utils';
@use '../core/tokens/m2/mat/card' as tokens-mat-card;
@use '../core/tokens/m2/mdc/elevated-card' as tokens-mdc-elevated-card;
@use '../core/tokens/m2/mdc/outlined-card' as tokens-mdc-outlined-card;
@use '@material/card/elevated-card-theme' as mdc-elevated-card-theme;
@use '@material/card/outlined-card-theme' as mdc-outlined-card-theme;

@mixin _emit-tokens($tokens) {
  @include mdc-elevated-card-theme.theme(token-utils.resolve-elevation(
      map.get($tokens, tokens-mdc-elevated-card.$prefix) or (),
      container-elevation,
      container-shadow-color
  ));
  @include mdc-outlined-card-theme.theme(token-utils.resolve-elevation(
      map.get($tokens, tokens-mdc-outlined-card.$prefix) or (),
      container-elevation,
      container-shadow-color
  ));
  @include token-utils.create-token-values(
      tokens-mat-card.$prefix,
      map.get($tokens, tokens-mat-card.$prefix) or ()
  );
}

@mixin color($config-or-theme, $tokens: null) {
  $config: theming.get-color-config($config-or-theme);
  $tokens: $tokens or sass-utils.deep-merge-all((
    tokens-mdc-elevated-card.$prefix: tokens-mdc-elevated-card.get-color-tokens($config),
    tokens-mdc-outlined-card.$prefix: tokens-mdc-outlined-card.get-color-tokens($config),
    tokens-mat-card.$prefix: tokens-mat-card.get-color-tokens($config),
  ));

  .mat-mdc-card {
    @include _emit-tokens($tokens);
  }
}

@mixin typography($config-or-theme, $tokens: null) {
  $config: typography.private-typography-to-2018-config(
      theming.get-typography-config($config-or-theme));
  $tokens: $tokens or sass-utils.deep-merge-all((
    tokens-mdc-elevated-card.$prefix: tokens-mdc-elevated-card.get-typography-tokens($config),
    tokens-mdc-outlined-card.$prefix: tokens-mdc-outlined-card.get-typography-tokens($config),
    tokens-mat-card.$prefix: tokens-mat-card.get-typography-tokens($config),
  ));

  .mat-mdc-card {
    @include _emit-tokens($tokens);
  }
}

@mixin density($config-or-theme, $tokens: null) {
  $density-scale: theming.get-density-config($config-or-theme);
  $tokens: $tokens or sass-utils.deep-merge-all((
    tokens-mdc-elevated-card.$prefix: tokens-mdc-elevated-card.get-density-tokens($density-scale),
    tokens-mdc-outlined-card.$prefix: tokens-mdc-outlined-card.get-density-tokens($density-scale),
    tokens-mat-card.$prefix: tokens-mat-card.get-density-tokens($density-scale),
  ));

  .mat-mdc-card {
    @include _emit-tokens($tokens);
  }
}

@mixin theme($theme-or-color-config) {
  $theme: theming.private-legacy-get-theme($theme-or-color-config);
  $tokens: map.get($theme, tokens);

  @include _emit-tokens($tokens or ());

  @include token-utils.back-compat-root-context($tokens or ()) {
    @include theming.private-check-duplicate-theme-styles($theme, 'mat-card') {
      $color: theming.get-color-config($theme);
      $density: theming.get-density-config($theme);
      $typography: theming.get-typography-config($theme);

      @if $color {
        @include color($color, $tokens and ());
      }
      @if $density {
        @include density($density, $tokens and ());
      }
      @if $typography {
        @include typography($typography, $tokens and ());
      }
    }
  }
}
