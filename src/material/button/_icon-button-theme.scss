@use 'sass:map';
@use '@material/icon-button/icon-button-theme' as mdc-icon-button-theme;
@use '../core/tokens/m2/mdc/icon-button' as tokens-mdc-icon-button;
@use '../core/tokens/m2/mat/icon-button' as tokens-mat-icon-button;
@use '../core/style/sass-utils';
@use '../core/tokens/token-utils';
@use '../core/theming/theming';
@use '../core/theming/inspection';


@mixin base($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));
  }
  @else {
    // Add default values for tokens not related to color, typography, or density.
    @include sass-utils.current-selector-or-root() {
      @include mdc-icon-button-theme.theme(tokens-mdc-icon-button.get-unthemable-tokens());
    }
  }
}

@mixin _icon-button-variant($theme, $palette) {
  $mdc-tokens: if($palette,
    tokens-mdc-icon-button.private-get-color-palette-color-tokens($theme, $palette),
    tokens-mdc-icon-button.get-color-tokens($theme)
  );

  $mat-tokens: if($palette,
    tokens-mat-icon-button.private-get-color-palette-color-tokens($theme, $palette),
    tokens-mat-icon-button.get-color-tokens($theme)
  );

  @include mdc-icon-button-theme.theme($mdc-tokens);
  @include token-utils.create-token-values(tokens-mat-icon-button.$prefix, $mat-tokens);
}

@mixin color($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));
  }
  @else {
    @include sass-utils.current-selector-or-root() {
      @include _icon-button-variant($theme, null);

      .mat-mdc-icon-button {
        &.mat-primary {
          @include _icon-button-variant($theme, primary);
        }

        &.mat-accent {
          @include _icon-button-variant($theme, accent);
        }

        &.mat-warn {
          @include _icon-button-variant($theme, warn);
        }
      }
    }
  }
}

@mixin typography($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));
  }
  @else {
    @include sass-utils.current-selector-or-root() {
      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,
        tokens-mat-icon-button.get-typography-tokens($theme));
    }
  }
}

@mixin density($theme) {
  @if inspection.get-theme-version($theme) == 1 {
    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));
  }
  @else {
    @include sass-utils.current-selector-or-root() {
      @include mdc-icon-button-theme.theme(tokens-mdc-icon-button.get-density-tokens($theme));
      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,
        tokens-mat-icon-button.get-density-tokens($theme));
    }
  }
}

@mixin theme($theme) {
  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon-button') {
    @if inspection.get-theme-version($theme) == 1 {
      @include _theme-from-tokens(inspection.get-theme-tokens($theme));
    }
    @else {
      @include base($theme);
      @if inspection.theme-has($theme, color) {
        @include color($theme);
      }
      @if inspection.theme-has($theme, density) {
        @include density($theme);
      }
      @if inspection.theme-has($theme, typography) {
        @include typography($theme);
      }
    }
  }
}

@mixin _theme-from-tokens($tokens) {
  @if ($tokens != ()) {
    @include mdc-icon-button-theme.theme(map.get($tokens, tokens-mdc-icon-button.$prefix));
    @include token-utils.create-token-values(
        tokens-mat-icon-button.$prefix, map.get($tokens, tokens-mat-icon-button.$prefix));
  }
}
